# 高阶函数:接收函数作为参数，或者将函数作为返回值返回的函数

print('-'*70)

# 1、普通函数
# 例子：筛选列表中的偶数
# 创建一个列表
l = [1,2,3,4,5,6,7,8,9,10]

# 定义一个函数：可以将指定列表中所有的偶数保存到一个新的列表中返回
def f(list):
    '''
    这是一个 筛选指定列表中偶数并将筛选出来的偶数返回 的一个函数
    参数：
        list -- 指定列表
    '''
    # 创建一个新列表用于保存筛选出来的偶数
    new_list = []

    # 对列表进行筛选（遍历）
    for n in list:
        
        #判断n的奇偶性
        if n % 2 == 0:
            new_list.append(n)

    # 将结果返回
    return new_list

print(f(l))
print(l)

print('-'*70)

# 2、lambda 匿名函数
def f0(a,b):
    return a+b
r = f0(5,6)
print(r)

print('-'*70)

# 创建匿名函数
lambda a,b : a+b
# 为匿名函数赋值
l1 = lambda a,b : a+b
# 调用并打印匿名函数
print(l(4,6))

print('-'*70)

# 3、filter()
#       filter()可以从序列中过滤出符合条件的元素，保存到一个新的序列中
#   参数：
#       1、函数，根据该函数来过滤序列（可迭代的结构）
#       2、需要过滤的序列（可迭代的结构）
#   返回值：
#       过滤后的新序列（可迭代的结构）
